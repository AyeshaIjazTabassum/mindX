# MindX Frontend Documentation

## Overview

The MindX Frontend is a sophisticated web-based control panel for managing the MindX Augmentic Intelligence system. It provides a cyberpunk-themed interface with real-time monitoring, agent management, and system control capabilities.

## Architecture

### Frontend Components

```
mindx_frontend_ui/
├── index.html          # Main application interface
├── app.js             # Core JavaScript functionality (34,341+ tokens)
├── styles3.css        # Enhanced cyberpunk styling
├── styles.css         # Fallback basic styling
├── corporate.css      # Corporate theme styling
├── server.js          # Express.js static server
├── package.json       # Node.js dependencies
├── debug.html         # Debug interface
└── test.html          # Test interface
```

### Technology Stack

- **Frontend Server**: Express.js (Node.js)
- **Styling**: CSS3 with cyberpunk theme
- **JavaScript**: Vanilla ES6+ (no frameworks)
- **Backend Communication**: REST API via Fetch API
- **Real-time Updates**: Polling and WebSocket simulation

## Installation & Setup

### Prerequisites

- Node.js (v14 or higher)
- npm (Node Package Manager)
- Python 3.11+ (for backend)
- MindX backend service running

### Quick Start

```bash
# Start the complete MindX web interface
./mindX.sh --frontend

# Or start with custom ports
./mindX.sh --frontend --frontend-port 3001 --backend-port 8001
```

### Manual Setup

```bash
# Navigate to frontend directory
cd mindx_frontend_ui

# Install dependencies
npm install

# Start frontend server
node server.js

# Or with custom port
FRONTEND_PORT=3001 BACKEND_PORT=8001 node server.js
```

## Configuration

### Environment Variables

| Variable | Default | Description |
|----------|---------|-------------|
| `FRONTEND_PORT` | 3000 | Port for frontend server |
| `BACKEND_PORT` | 8000 | Port for backend API |

### Port Configuration

The frontend automatically detects the backend port through:
1. Environment variables
2. Window object configuration
3. Default fallback to port 8000

```javascript
const backendPort = window.MINDX_BACKEND_PORT || process.env.BACKEND_PORT || '8000';
const apiUrl = `http://localhost:${backendPort}`;
```

## User Interface

### Main Interface Components

#### 1. Header Section
- **System Title**: "MindX Control Panel"
- **Status Indicator**: Real-time connection status
- **Navigation**: Tab-based interface

#### 2. Tab System
- **Dashboard**: System overview and status
- **Agents**: Agent management and monitoring
- **Tools**: Available tools and utilities
- **Logs**: System logs and debugging
- **Settings**: Configuration options

#### 3. Agent Management
- **Agent Registry**: List of all registered agents
- **Agent Status**: Real-time status monitoring
- **Agent Actions**: Create, delete, evolve agents
- **Agent Communication**: Direct agent interaction

#### 4. System Monitoring
- **Performance Metrics**: CPU, memory, task status
- **Activity Feed**: Real-time system activities
- **Error Tracking**: System errors and warnings
- **Health Checks**: Component health status

### Visual Design

#### Cyberpunk Theme
- **Color Scheme**: Neon blues, purples, and greens
- **Typography**: Monospace fonts for technical feel
- **Animations**: Smooth transitions and hover effects
- **Icons**: Custom emoji-based status indicators

#### Responsive Design
- **Mobile-First**: Optimized for all screen sizes
- **Flexible Layout**: Adapts to different viewport sizes
- **Touch-Friendly**: Large buttons and touch targets

## API Integration

### Backend Communication

The frontend communicates with the MindX backend through a comprehensive REST API:

#### Core Endpoints

```javascript
// System Status
GET /health
GET /system/status
GET /core/agent-activity

// Agent Management
GET /agents
POST /agents
DELETE /agents/{agent_id}
POST /agents/{agent_id}/evolve
POST /agents/{agent_id}/sign

// Commands
POST /commands/evolve
POST /commands/deploy
POST /commands/introspect
POST /commands/analyze_codebase
POST /commands/basegen
POST /commands/agint/stream

// Coordinator
POST /coordinator/query
POST /coordinator/analyze
POST /coordinator/improve
GET /coordinator/backlog
POST /coordinator/backlog/process
POST /coordinator/backlog/approve
POST /coordinator/backlog/reject

// Identities
GET /identities
POST /identities
DELETE /identities

// Logs
GET /logs/runtime
```

### Real-time Updates

#### Status Monitoring
```javascript
// Check backend status every 10 seconds
setInterval(checkBackendStatus, 10000);

async function checkBackendStatus() {
    try {
        const response = await fetch(`${apiUrl}/health`);
        if (response.ok) {
            updateStatusIndicator('connected');
        } else {
            throw new Error('Backend not ready');
        }
    } catch (error) {
        updateStatusIndicator('disconnected', error.message);
    }
}
```

#### AGInt Streaming
```javascript
// Stream AGInt cognitive loop updates
async function streamAGInt(directive) {
    const response = await fetch(`${apiUrl}/commands/agint/stream`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ directive })
    });
    
    const reader = response.body.getReader();
    const decoder = new TextDecoder();
    
    while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        
        const chunk = decoder.decode(value);
        const lines = chunk.split('\n');
        
        for (const line of lines) {
            if (line.startsWith('data: ')) {
                const data = JSON.parse(line.slice(6));
                updateAGIntStatus(data);
            }
        }
    }
}
```

## Features

### 1. Agent Management

#### Agent Registry
- View all registered agents
- Real-time status updates
- Agent type and configuration display
- Performance metrics

#### Agent Operations
- **Create Agent**: Deploy new agents with custom configuration
- **Delete Agent**: Remove agents from the system
- **Evolve Agent**: Trigger agent evolution with directives
- **Sign Messages**: Use agent identities for message signing

### 2. System Monitoring

#### Performance Dashboard
- CPU and memory usage
- Task execution status
- Queue management
- Error rates and warnings

#### Activity Feed
- Real-time system activities
- Agent interactions
- Command executions
- System events

### 3. Command Interface

#### Direct Commands
- **Evolve**: Trigger codebase evolution
- **Deploy**: Deploy new agents
- **Introspect**: Generate new personas
- **Analyze**: Analyze codebase components
- **BaseGen**: Generate documentation

#### Coordinator Interface
- Query the coordinator
- Trigger system analysis
- Request component improvements
- Manage improvement backlog

### 4. Debugging Tools

#### Debug Interface (`debug.html`)
- System diagnostics
- API testing
- Performance profiling
- Error analysis

#### Test Interface (`test.html`)
- Component testing
- API endpoint validation
- Integration testing
- Performance benchmarking

## Development

### File Structure

```
mindx_frontend_ui/
├── index.html          # Main application (517 lines)
├── app.js             # Core functionality (34,341+ tokens)
├── styles3.css        # Enhanced styling (cyberpunk theme)
├── styles.css         # Basic styling (fallback)
├── corporate.css      # Corporate theme
├── server.js          # Express server (simple static)
├── package.json       # Dependencies
├── debug.html         # Debug interface
├── test.html          # Test interface
└── node_modules/      # Dependencies (auto-generated)
```

### Key Functions

#### API Communication
```javascript
async function sendRequest(endpoint, method, body) {
    try {
        const response = await fetch(`${apiUrl}${endpoint}`, {
            method: method,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(body)
        });
        return await response.json();
    } catch (error) {
        console.error('API Error:', error);
        throw error;
    }
}
```

#### Status Management
```javascript
function updateStatusIndicator(status, message = '') {
    const statusLight = document.getElementById('status-light');
    const statusText = document.getElementById('status-text');
    
    switch (status) {
        case 'connected':
            statusLight.className = 'status-light-green';
            statusText.textContent = 'Connected';
            break;
        case 'disconnected':
            statusLight.className = 'status-light-red';
            statusText.textContent = `Disconnected: ${message}`;
            break;
        case 'connecting':
            statusLight.className = 'status-light-yellow';
            statusText.textContent = 'Connecting...';
            break;
    }
}
```

### Adding New Features

#### 1. New API Endpoint
```javascript
// Add to app.js
async function newFeature(data) {
    return await sendRequest('/new-endpoint', 'POST', data);
}
```

#### 2. New UI Component
```html
<!-- Add to index.html -->
<div class="new-component">
    <h3>New Feature</h3>
    <button id="new-feature-btn">Execute</button>
</div>
```

```javascript
// Add to app.js
document.getElementById('new-feature-btn').addEventListener('click', async () => {
    const result = await newFeature({ data: 'example' });
    console.log(result);
});
```

#### 3. New Styling
```css
/* Add to styles3.css */
.new-component {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 10px;
    padding: 20px;
    margin: 10px 0;
}
```

## Troubleshooting

### Common Issues

#### 1. Frontend Won't Start
```bash
# Check if port is available
lsof -i :3000

# Kill existing process
kill -9 $(lsof -ti:3000)

# Restart frontend
node server.js
```

#### 2. Backend Connection Failed
```bash
# Check backend status
curl http://localhost:8000/health

# Check backend logs
tail -f data/logs/mindx_coordinator_service.log
```

#### 3. Dependencies Issues
```bash
# Clear node_modules and reinstall
rm -rf node_modules package-lock.json
npm install
```

#### 4. Port Conflicts
```bash
# Use custom ports
FRONTEND_PORT=3001 BACKEND_PORT=8001 node server.js
```

### Debug Mode

Enable debug mode by accessing `debug.html`:
- System diagnostics
- API testing
- Performance monitoring
- Error logging

### Log Files

- **Frontend Logs**: `data/logs/mindx_frontend_service.log`
- **Backend Logs**: `data/logs/mindx_coordinator_service.log`
- **Setup Logs**: `data/logs/mindx_deployment_setup.log`

## Performance

### Optimization Features

#### 1. Lazy Loading
- Components load on demand
- Images load as needed
- API calls are batched

#### 2. Caching
- Static assets are cached
- API responses are cached
- Status updates are throttled

#### 3. Error Handling
- Graceful degradation
- Retry mechanisms
- User-friendly error messages

### Monitoring

#### Performance Metrics
- Page load times
- API response times
- Memory usage
- Error rates

#### Real-time Monitoring
- Connection status
- Agent activity
- System health
- Task progress

## Security

### Security Features

#### 1. CORS Configuration
```javascript
// Backend CORS setup
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"]
);
```

#### 2. Input Validation
- All API inputs are validated
- XSS protection
- CSRF protection

#### 3. Error Handling
- Sensitive information is not exposed
- Error messages are user-friendly
- Logging is secure

## Deployment

### Production Deployment

#### 1. Environment Setup
```bash
# Set production environment
export NODE_ENV=production
export FRONTEND_PORT=3000
export BACKEND_PORT=8000
```

#### 2. Process Management
```bash
# Use PM2 for process management
npm install -g pm2
pm2 start server.js --name mindx-frontend
pm2 startup
pm2 save
```

#### 3. Reverse Proxy
```nginx
# Nginx configuration
server {
    listen 80;
    server_name mindx.example.com;
    
    location / {
        proxy_pass http://localhost:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
    
    location /api {
        proxy_pass http://localhost:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
```

### Docker Deployment

#### Dockerfile
```dockerfile
FROM node:18-alpine

WORKDIR /app
COPY package*.json ./
RUN npm install --production

COPY . .
EXPOSE 3000

CMD ["node", "server.js"]
```

#### Docker Compose
```yaml
version: '3.8'
services:
  frontend:
    build: .
    ports:
      - "3000:3000"
    environment:
      - FRONTEND_PORT=3000
      - BACKEND_PORT=8000
    depends_on:
      - backend
```

## Contributing

### Development Guidelines

#### 1. Code Style
- Use ES6+ features
- Follow consistent naming conventions
- Add comments for complex logic
- Use meaningful variable names

#### 2. Testing
- Test all new features
- Use the test interface
- Validate API integration
- Check responsive design

#### 3. Documentation
- Update this documentation
- Add inline comments
- Document new API endpoints
- Update configuration options

### Pull Request Process

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Test thoroughly
5. Update documentation
6. Submit pull request

## License

This project is part of the MindX Augmentic Intelligence system. See the main project license for details.

## Support

For support and questions:
- Check the troubleshooting section
- Review the debug interface
- Check system logs
- Open an issue on GitHub

---

*Last updated: December 2024*
*Version: 1.0.0*
